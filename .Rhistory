rm(list=ls())
rm(list=ls())
library(rio)
restaurant=import("6304 Module 5 Data Sets.xlsx",
sheet="Restaurant",skip=2)
colnames(restaurant)=tolower(make.names(colnames(restaurant)))
attach(restaurant)
names(restaurant)
plot(rooms.occupied,revenue,pch=19,main="Restaurant Revenue")
plot(rooms.occupied,revenue,pch=19,
main="Restaurant Revenue", xlim=c(0,100),ylim=c(0,10000))
cor(rooms.occupied,revenue)
restaurant.out=lm(revenue~rooms.occupied,data=restaurant)
?matrix
freq = c(0.6,0.3,0.4,0.4,0.2,0.6,0.3,0.4,0.9,0.2) #freq of hospital vists per patient over 12 months.
BP = c(103,87,32,43,59,109,78,205,135,178) #BP of each patient
first = c(1,1,1,1,0,0,0,0,NA,1) #first doctor BP evaluation
second = c(0,0,1,1,0,0,1,1,1,1) #second doctor BP evaluation
final = c(0,1,0,1,0,1,0,1,1,1) #final evaluation
hospital.df = data.frame(freq,BP,first,second,final)
hospital.df$freq = 100 * hospital.df$freq
#Boxplot
boxplot(hospital.df$freq, hospital.df$BP, names = c("Freq. of hospital visits over 12 months","BP" ))
#Histogram
par(mfrow=c(1,2))
hist(hospital.df$freq, main='Histogram of % of hospital visits',xlab = 'Frequency of visits',ylab = 'Number of patients',col='green')
hist(hospital.df$BP, col='red',main='Histogram of BP',ylab = 'Number of patients',xlab = 'BP')
desc(hospital.df$BP)
str(hospital.df$BP)
summary(hospital.df$BP)
mean(hospital.df$BP)
sd(hospital.df$BP)
mean(hospital.df$final)
hospital.df
rm(list=ls())
setwd("C:/Users/gagan/OneDrive/Desktop/Courses/SDM/Final Exam")
d = import("HRanalytics.xlsx")
library(rio)
library(dplyr)
d = import("HRanalytics.xlsx")
dim(d)
str(d)
str(d)
dim(d)
table(d$PerformanceScore)
0.5 * 311
table(d$EmpSatisfaction)
200/311
table(d$EmpSatisfaction)
hist(d$Absences)
hist(log(d$Absences))
#Checking for missing values
colSums(is.na(d)) # 8 NA's in manager ID. #104 in DateOfTermination.means 207 are still working.
aggregate(d$Department, count)
aggregate(d$Department ~ d$Employee_Name, count)
aggregate(d$Department ~ d$Employee_Name, count, data=d)
aggregate(d$Department ~ d$Employee_Name, unique, data=d)
aggregate(d$Department ~ d$Employee_Name, count(unique), data=d)
#This is too high.
aggregate(Absences ~ Department, data=d, mean)
hist(Salary)
#Checking for missing values
colSums(is.na(d)) # 8 NA's in manager ID. #104 in DateOfTermination.means 207 are still working.
str(d)
dim(d)
aggregate(d$Department ~ d$Employee_Name, count(unique), data=d)
d <- d[d$Department != "Executive Office", ]
#Checking for missing values
colSums(is.na(d)) # 8 NA's in manager ID. #104 in DateOfTermination.means 207 are still working.
#Feature Engineering.
"d$MarriedID         = NULL #Correlated with MaritalStatusID
d$MaritalStatusID   = NULL #Correlated with MaritalDesc
d$EmpStatusID       = NULL #Correlated with EmploymentStatus
d$PositionID        = NULL #Correlated with PositionID
d$ManagerID         = NULL #8 NA's and correlated with ManagerName
d$PerfScoreID      = NULL #Correlates with PerformanceScore"
#Factor conversion
d$Termd              =    as.factor(d$Termd)
d$Sex                =    as.factor(d$Sex)
d$Sex                =    relevel(d$Sex, "F")
d$MaritalDesc        =    as.factor(d$MaritalDesc)
d$MaritalDesc        =    relevel(d$MaritalDesc, "Widowed")
d$CitizenDesc        =    as.factor(d$CitizenDesc)
d$HispanicLatino     =    as.factor(d$HispanicLatino)
d$HispanicLatino     =    relevel(d$HispanicLatino, "No")
d$RaceDesc           =    as.factor(d$RaceDesc)
d$RaceDesc           =    relevel(d$RaceDesc, "Black or African American")
d$EmploymentStatus   =    as.factor(d$EmploymentStatus)
d$Department         =    as.factor(d$Department)
d$Department         =    relevel(d$Department, "Software Engineering")
d$ManagerName        =    as.factor(d$ManagerName)
d$RecruitmentSource  =    as.factor(d$RecruitmentSource)
d$RecruitmentSource  =    relevel(d$RecruitmentSource, "On-line Web application")
d$Position           =    as.factor(d$Position)
d$Position           =    relevel(d$Position, "Accountant I")
# Convert PerfScoreID to an ordered factor
#d$PerfScoreID = ordered(d$PerfScoreID, levels = c(1, 2, 3, 4), labels = c("PIP", "Needs improvement", "Fully meets", "Exceeds"))
d$EmpSatisfaction = as.factor(d$EmpSatisfaction)
str(d)
#Descriptive analysis
attach(d)
table(Termd) # 104 Employees terminated and 207 are active
table(PerfScoreID) #243 Employees are rated as "Fully meets"
table(EmpSatisfaction) #Most of the employees have 3 or higher satisfaction score.
hist(EngagementSurvey) #Looks good
summary(EngagementSurvey)
hist(Absences)
hist(log(Absences))
summary(Absences) #The average number of absence days in the last 30 days is 10 days.
#This is too high.
aggregate(Absences ~ Department, data=d, mean)
hist(Salary)
summary(Salary)
table(RecruitmentSource)
table(SpecialProjectsCount)
hist(SpecialProjectsCount)
summary(SpecialProjectsCount)
#Correlation Analysis
library(PerformanceAnalytics)
numeric_cols <- d %>%
select_if(is.numeric)
chart.Correlation(numeric_cols, histogram=TRUE, pch=19)
chart.Correlation(numeric_cols, histogram=TRUE, pch=19)
rm(list=ls())
library(rio)
library(dplyr)
d = import("HRanalytics.xlsx")
str(d)
dim(d)
aggregate(d$Department ~ d$Employee_Name, count(unique), data=d)
#Feature Engineering.
d <- d[d$Salary > 220000, ] #Only 1 employee in Exec office department.
rm(list=ls())
library(rio)
library(dplyr)
d = import("HRanalytics.xlsx")
str(d)
dim(d)
#Checking for missing values
colSums(is.na(d)) # 8 NA's in manager ID. #104 in DateOfTermination.means 207 are still working.
#Feature Engineering.
d <- d[d$Salary < 220000, ] #Only 1 employee in Exec office department.
#Factor conversion
d$Termd              =    as.factor(d$Termd)
d$Sex                =    as.factor(d$Sex)
d$Sex                =    relevel(d$Sex, "F")
d$MaritalDesc        =    as.factor(d$MaritalDesc)
d$MaritalDesc        =    relevel(d$MaritalDesc, "Widowed")
d$CitizenDesc        =    as.factor(d$CitizenDesc)
d$HispanicLatino     =    as.factor(d$HispanicLatino)
d$HispanicLatino     =    relevel(d$HispanicLatino, "No")
d$RaceDesc           =    as.factor(d$RaceDesc)
d$RaceDesc           =    relevel(d$RaceDesc, "Black or African American")
d$EmploymentStatus   =    as.factor(d$EmploymentStatus)
d$Department         =    as.factor(d$Department)
d$Department         =    relevel(d$Department, "Software Engineering")
d$ManagerName        =    as.factor(d$ManagerName)
d$RecruitmentSource  =    as.factor(d$RecruitmentSource)
d$RecruitmentSource  =    relevel(d$RecruitmentSource, "On-line Web application")
d$Position           =    as.factor(d$Position)
d$Position           =    relevel(d$Position, "Accountant I")
d$EmpSatisfaction    =    as.factor(d$EmpSatisfaction)
str(d)
attach(d)
aggregate(Absences ~ Department, data=d, mean)
hist(Salary)
hist(log(Salary))
hist(Salary)
hist(log(Salary))
table(RecruitmentSource)
table(SpecialProjectsCount)
hist(SpecialProjectsCount)
summary(SpecialProjectsCount)
#Correlation Analysis
library(PerformanceAnalytics)
numeric_cols <- d %>%
select_if(is.numeric)
chart.Correlation(numeric_cols, histogram=TRUE, pch=19)
chart.Correlation(numeric_cols, histogram=TRUE, pch=19)
per_ml1 <- multinom(PerformanceScore ~ EmpSatisfaction + Department + ManagerName  +
+ Absences + DaysLateLast30 + RecruitmentSource, data=d, trace=FALSE)
#Model for performance score
d$PerformanceScore = as.factor(d$PerformanceScore)
d$PerformanceScore = relevel(d$PerformanceScore, "PIP")
#Model for performance score
#1. Multinomial model.
d$PerformanceScore = as.factor(d$PerformanceScore)
d$PerformanceScore = relevel(d$PerformanceScore, "PIP")
per_ml1 <- multinom(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName  +
+ Absences + DaysLateLast30 + RecruitmentSource, data=d, trace=FALSE)
library("nnet")
per_ml1 <- multinom(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName  +
+ Absences + DaysLateLast30 + RecruitmentSource, data=d, trace=FALSE)
per_ml1 <- multinom(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName  +
+ Absences  + RecruitmentSource RaceDesc + Sex, data=d, trace=FALSE)
per_ml1 <- multinom(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource RaceDesc + Sex, data=d, trace=FALSE)
per_ml1 <- multinom(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d, trace=FALSE)
library(stargazer)
stargazer(per_ml1, type="html", single.row=TRUE, out="per_ml1.htm")
per_ml1 <- multinom(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d,subset = Termd=="0", trace=FALSE)
stargazer(per_ml1, type="html", single.row=TRUE, out="per_ml1.htm")
library(stargazer)
stargazer(per_ml1, type="html", single.row=TRUE, out="per_ml1.htm")
per_ml1 <- multinom(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d,subset = Termd=="0", trace=FALSE)
stargazer(per_ml1, type="html", single.row=TRUE, out="sat_ml.htm")
sat_ml = multinom(EmpSatisfaction ~ Salary + PerformanceScore + Department * ManagerName  +
RecruitmentSource + RaceDesc + Sex , data=d,subset = Termd=="0", trace=FALSE)
per_ml <- multinom(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d,subset = Termd=="0", trace=FALSE)
sat_ml = multinom(EmpSatisfaction ~ Salary + PerformanceScore + Department * ManagerName  +
RecruitmentSource + RaceDesc + Sex , data=d,subset = Termd=="0", trace=FALSE)
stargazer(per_ml1,sat_ml, type="html", single.row=TRUE, out="per_sat_ml.htm")
hist(Salary)
hist(log(Salary))
#The odds ratio of these models is close to Inf and cannot be interpretable.
#Absences
library(MASS)
ab_nb = glm.nb(Absences ~ Department + PerformanceScore +  Salary  + DaysLateLast30 ,subset = Termd=="0", data = d,link = log)
summary(ab_nb)
ab_nb = glm.nb(Absences ~ Department + PerformanceScore +  Salary  + Manager + RecruitmentSource + Race + Sex ,subset = Termd=="0", data = d,link = log)
ab_nb = glm.nb(Absences ~ Department + PerformanceScore +  Salary  + ManagerName + RecruitmentSource + Race + Sex ,subset = Termd=="0", data = d,link = log)
ab_nb = glm.nb(Absences ~ Department + PerformanceScore +  Salary  + ManagerName + RecruitmentSource + RaceDesc + Sex ,subset = Termd=="0", data = d,link = log)
summary(ab_nb)
per_ml <- multinom(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d, trace=FALSE)
per_ml <- multinom(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d, trace=FALSE)
sat_ml = multinom(EmpSatisfaction ~ Salary + PerformanceScore + Department * ManagerName  +
RecruitmentSource + RaceDesc + Sex , data=d,subset = Termd=="0", trace=FALSE)
ab_nb = glm.nb(Absences ~ Department + PerformanceScore +  Salary  + ManagerName + RecruitmentSource + RaceDesc + Sex , data = d,link = log)
stargazer(per_ml1,sat_ml, type="html", single.row=TRUE, out="all.htm")
library(stargazer)
stargazer(per_ml,sat_ml, type="html", single.row=TRUE, out="all.htm")
summary(ab_nb)
stargazer(ab_nb, type="html", single.row = TRUE, out="absences.html")
#Let's try polr() models on Performance score and Emp satisfaction.
per_ol <- polr(PerformanceScore ~  PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d, Hess=TRUE)
#Let's try polr() models on Performance score and Emp satisfaction.
per_ol <- polr(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d, Hess=TRUE)
#Let's try polr() models on Performance score and Emp satisfaction.
per_ol <- polr(PerformanceScore ~ Salary +  EmpSatisfaction + Department + ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d, Hess=TRUE)
summary(per_ol)
#Let's try polr() models on Performance score and Emp satisfaction.
per_ol <- polr(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d, Hess=TRUE)
summary(per_ol)
#Let's try polr() models on Performance score and Emp satisfaction.
per_ol <- polr(PerformanceScore ~ Salary +  EmpSatisfaction
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d, Hess=TRUE)
summary(per_ol)
#Let's try polr() models on Performance score and Emp satisfaction.
per_ol <- polr(PerformanceScore ~   EmpSatisfaction
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d, Hess=TRUE)
summary(per_ol)
#Let's try polr() models on Performance score and Emp satisfaction.
per_ol <- polr(PerformanceScore ~ Salary +  EmpSatisfaction + Department + ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d, Hess=TRUE)
summary(per_ol)
#Let's try polr() models on Performance score and Emp satisfaction.
per_ol <- polr(PerformanceScore ~ Salary, data=d, Hess=TRUE)
summary(per_ol)
aggregate(Salary ~ PerformanceScore, mean, data=d)
str(d)
#Let's try polr() models on Performance score and Emp satisfaction.
per_ol <- polr(PerformanceScore ~ Salary , data=d, Hess=TRUE)
summary(per_ol)
sum(is.na(d$PerformanceScore))
table(d$PerformanceScore)
summary(d$Salary)
sum(!is.finite(d$Salary))
#Since the DV's are bounded, we can try using Tobit models.
library(AER)
tobi_per = tobit(PerfScoreID ~ PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, left=1, right=4, data=d)
tobi_per = tobit(PerfScoreID ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, left=1, right=4, data=d)
summary(tobi_per)
tobi_per = tobit(PerfScoreID ~ EmpSatisfaction + Department + ManagerName  + RecruitmentSource, left=1, right=4, data=d)
summary(tobi_per)
tobi_per = tobit(PerfScoreID ~ Salary +  EmpSatisfaction + Department + ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, left=1, right=4, data=d)
summary(tobi_per)
str(d)
tobi_per = tobit(PerfScoreID ~ Salary +  EmpSatisfaction + Department + ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, left=1, right=4, data=d, subset = Termd == 0)
summary(tobi_per)
tobi_per = tobit(PerfScoreID ~ Salary +  EmpSatisfaction + Department + ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, left=1, right=4, data=d)
summary(tobi_per)
tobi_per = tobit(PerfScoreID ~ EmpSatisfaction + Department + ManagerName  + RecruitmentSource, left=1, right=4, data=d)
summary(tobi_per)
str()
str(d)
tobi_per = tobit(PerfScoreID ~ Salry + EmpSatisfaction + Department + ManagerName  + RecruitmentSource, left=1, right=4, data=d)
tobi_per = tobit(PerfScoreID ~ Salary + EmpSatisfaction + Department + ManagerName  + RecruitmentSource, left=1, right=4, data=d)
summary(tobi_per)
tobi_per = tobit(PerfScoreID ~  EmpSatisfaction + Department + ManagerName  + RecruitmentSource, left=1, right=4, data=d)
summary(tobi_per)
tobi_sat = tobit(EmpSatisfaction ~ PerformanceScore + Department + ManagerName  + RecruitmentSource, left=1, right=4, data=d)
d$EmpSatisfaction = as.numeric(d$EmpSatisfaction)
tobi_sat = tobit(EmpSatisfaction ~ PerformanceScore + Department + ManagerName  + RecruitmentSource, left=1, right=4, data=d)
summary(tobi_sat)
str(d)
pois <- glm(Salary ~ Department * (RaceDesc + Sex) + PerformanceScore, data = d,family = poisson(link = "log"))
summary(pois)
per_ml <- multinom(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d, trace=FALSE)
sat_ml = multinom(EmpSatisfaction ~ Salary + PerformanceScore + Department * ManagerName  +
RecruitmentSource + RaceDesc + Sex , data=d, trace=FALSE)
#Model for Absences. Negbin because pois had high dispersion.
library(MASS)
ab_nb = glm.nb(Absences ~ Department + PerformanceScore +  Salary  + ManagerName + RecruitmentSource + RaceDesc + Sex , data = d,link = log)
stargazer(per_ml,sat_ml, type="html", single.row=TRUE, out="all.htm")
#Let's try polr() models on Performance score and Emp satisfaction.
per_ol <- polr(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d
, Hess=TRUE)
summary(per_ol)
sat_ol = polr(EmpSatisfaction ~ Salary + PerformanceScore + Department * ManagerName  +
RecruitmentSource + RaceDesc + Sex , data=d, Hess=TRUE)
#Let's try polr() models on Performance score and Emp satisfaction.
d$PerformanceScore <- factor(d$PerformanceScore, levels=c("PIP",
"Needs Improvement", "Fully Meets", "Exceeds"), ordered=TRUE)
per_ol <- polr(PerformanceScore ~ Salary +  EmpSatisfaction + Department * ManagerName
+ Absences  + RecruitmentSource + RaceDesc + Sex, data=d
, Hess=TRUE)
summary(per_ol)
tobi_per = tobit(PerfScoreID ~  EmpSatisfaction + Department + ManagerName  + RecruitmentSource, left=1, right=4, data=d)
summary(tobi_per)
d$EmpSatisfaction = as.numeric(d$EmpSatisfaction)
tobi_sat = tobit(EmpSatisfaction ~ PerformanceScore + Department + ManagerName  + RecruitmentSource, left=1, right=4, data=d)
summary(tobi_sat)
str(d)
tobi_sat = tobit(EmpSatisfaction ~ PerformanceScore + Department + ManagerName  + RecruitmentSource, left=1, right=5, data=d)
summary(tobi_sat)
plot(tobi_per)
plot(fitted(tobi_per))
# Scatterplot
plot(fitted(tobi_per), resid(tobi_per))
plot(fitted(tobi_per), d$PerfScoreID, xlab = "Fitted values", ylab = "Perf.score")
# Add LOESS line to scatterplot
lines(lowess(fitted(tobi_er), d$PerfScoreID), col = "red")
# Add LOESS line to scatterplot
lines(lowess(fitted(tobi_per), d$PerfScoreID), col = "red")
#Testing Normality
# Extract residuals from the model
residuals <- residuals(tobi_per, type = "pearson")
#Testing Normality
# Extract residuals from the model
residuals <- residuals(tobi_per, type = "pearson")
#Testing Normality
# Extract residuals from the model
resid <- residuals(tobi_per, type = "pearson")
#Testing Normality
# Extract residuals from the model
resid <- residuals(tobi_per)
# Create Q-Q plot of residuals
qqnorm(resid)
qqline(resid)
#Testing Independence
library(lmtest)
dwtest(resid ~ seq_along(resid))
library('car')
vif(tobi_per)
# Create Q-Q plot of residuals
qqnorm(resid)
qqline(resid) #Fails on the edges but lets give it a pass.
qqline(resid, col='red') #Fails on the edges but lets give it a pass.
stargazer(per_ml,sat_ml, type="html", single.row=TRUE, out="all.htm")
stargazer(ab_nb, type="html", single.row = TRUE, out="absences.html")
stargazer(tobi_per,tobi_sat, type="html", single.row=TRUE, out="tobits.htm")
stargazer(ab_nb, type="html", single.row=TRUE, out="nb.htm")
# Extract the coefficients
coefficients <- coef(tobi_per)
# Find the top three factors that contribute positively or negatively to employee performance
top_pos_factors <- head(sort(coefficients, decreasing = TRUE), n = 3)
top_neg_factors <- head(sort(coefficients), n = 3)
# Extract the coefficients
coefficients <- coef(tobi_sat)
# Find the top three factors that contribute positively or negatively to employee performance
top_pos_factors <- head(sort(coefficients, decreasing = TRUE), n = 3)
top_neg_factors <- head(sort(coefficients), n = 3)
tobi_per = tobit(PerfScoreID ~  Salary + EmpSatisfaction + Department + ManagerName  + RecruitmentSource, left=1, right=4, data=d)
summary(tobi_per)
tobi_sat = tobit(EmpSatisfaction ~ Salary + PerformanceScore + Department + ManagerName  + RecruitmentSource, left=1, right=5, data=d)
summary(tobi_sat)
tobi_sat = tobit(EmpSatisfaction ~ Salary + PerformanceScore + Department + ManagerName  + RecruitmentSource, left=1, right=5, data=d)
summary(tobi_sat)
stargazer(tobi_per,tobi_sat, type="html", single.row=TRUE, out="tobits.htm")
tobi_sat = tobit(EmpSatisfaction ~ PerformanceScore + Department + ManagerName  + RecruitmentSource, left=1, right=5, data=d)
stargazer(tobi_per,tobi_sat, type="html", single.row=TRUE, out="tobits.htm")
# Extract the coefficients
coefficients <- coef(ab_nb)
# Find the top three factors that contribute positively or negatively to employee performance
top_pos_factors <- head(sort(coefficients, decreasing = TRUE), n = 3)
top_neg_factors <- head(sort(coefficients), n = 3)
levels(Department)
56-29.6
105-31
levels(RecruitmentSource)
# Create a new variable "days_of_work" from DateofTermination and DateOfHire only if the employee is terminated.
library(lubridate)
d$time = ifelse( d$Termd == 0,as.numeric(difftime(ymd(d$LastPerformanceReview_Date), ymd(d$DateofHire), units = "days")),
as.numeric(difftime(ymd(d$DateofTermination), ymd(d$DateofHire),units = "days")))
d <- d[d$time >= 0,]
library(survival)
# Fit Kaplan-Meier survival curves for each department
km_fit <- survfit(Surv(time, Termd) ~ Department, data = d)
# Plot Kaplan-Meier curves for each department
plot(km_fit, col=c("blue", "red", "green", "orange", "purple", "black"),
xlab="Time (days)", ylab="Survival Probability", main="Kaplan-Meier Curves by Department")
legend("topleft", legend=levels(d$Department), col=c("blue", "red", "green", "orange", "purple", "black"), lty=1, cex = 0.8)
# Estimate the survival probability at 5 years for each department
summary(km_fit, times=1825)
# Fit Kaplan-Meier survival curves for each department
km_fit <- survfit(Surv(time, Termd) ~ Department, data = d)
# Plot Kaplan-Meier curves for each department
plot(km_fit, col=c("blue", "red", "green", "orange", "purple", "black"),
xlab="Time (days)", ylab="Survival Probability", main="Kaplan-Meier Curves by Department")
legend("topleft", legend=levels(d$Department), col=c("blue", "red", "green", "orange", "purple", "black"), lty=1, cex = 0.8)
#Q5
hist(log(Salary))
library(AER)
pois <- glm(Salary ~ Department * (RaceDesc + Sex) + PerformanceScore, data = d,family = poisson(link = "log"))
summary(pois)
#Lets try nb
nb = glm.nb(Salary ~ Department * (RaceDesc + Sex + PerformanceScore +EmpSatisfaction ) , data = d)
library('car')
vif(nb)
summary(nb)
stargazer(nb, type="html", single.row = TRUE, out="sal.html")
levels(Department)
